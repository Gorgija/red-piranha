#labels Featuredtidy,Featured
#sidebar SideBarDeveloper

_TODO Tidy this page_

||  <img src="http://icons.iconarchive.com/icons/mart/glaze/48/source-j-icon.png"> || You've already checked out the [RedPiranhaExamples Online Examples] . And you've looked at the  [EndUserGettingStarted] and [PowerUserGettingStarted] to see how to add your own information and new rules to these samples. ||

But what if there is something that Red-Piranha doesn't yet do, a feature you want to add? This page shows you how to get started.

There are two parts to the Red-Piranha Project
  * Red Piranha - the core project, deployable to Google App Engine (GAE) that takes excel spreadsheets and runs pre-compiled rules against them. While this is a command line and other interace, mostly this project runs on the web.
  * Rule Player - A GUI used by Power Users (see [PowerUserGettingStarted] in order to compile the rules for running in GAE. This runs (via Java Webstart, or local Java) on the Users PC (Windows, Mac, Linux or other). This local compile is needed as Google currently do not whitelist some of the code Drools needs to compile. Once compiled, the rule package is loaded into Google App Engine where normal users to can use them.


== Instructions for developers on how to start using Red-Piranha ==

  * [#Setup_the_environment Setup the environment]
  * [#Checking_out_the_code Checking out the code]
  * [#Building_the_code Building the code] 
  * [#Deploying_to_App_Engine Deploying to App Engine]
  * [#Building_your_own_rules Building your own rules]
  * [#Extending_Red_Piranha Extending Red Piranha]
  * [#Red_Piranha_for_Drools_Developers Red Piranha for Drools Developers]

=== Other useful pages ===

  * [ProjectLayout]
  * [LibrariesUsed] 
  * [RoadMap]
  * [RedPiranhaExamples Running the Examples]
  
  
== Setup the environment ==
  # Ensure you have Java installed on your Machine
  # If you don't already have a google account, get one at [https://www.google.com/accounts/NewAccount?continue=http://code.google.com/hosting/faq.html here]
  # Download and install [http://www.eclipse.org/home/categories/index.php?category=enterprise Eclipse]
  # Get the [http://subclipse.tigris.org/ Subversion Plugin for Eclipse]: 
  # Get the [http://code.google.com/eclipse/docs/download.htmlGoogle App Engine Plugin for Eclipse] 
  # Get the [http://www.jboss.org/drools/downloads.html Drools Eclipse Plugin]

== Checking out the code ==

The source code for Red Piranha is hosted by Google using Subversion. Background Information on Subversion (SVN) source control, hosted at Google code can be found at:
  * Google FAQ on using Subversion; http://code.google.com/p/support/wiki/SubversionFAQ
  * [http://internetducttape.com/2007/0/03/howto_google_code_hosting_subversion_tortoisesvn/ This post] is a good description of how to checkout the Google code. 
  * Browse the source at [http://code.google.com/p/red-piranha/source/checkout source]. 

If you're logged in with google,
[http://code.google.com/p/red-piranha/source/checkout This page] will give you more detailed instructions on how to Checkout the code


When checking out the two projects, they should end up in two parallel folders i.e.
  * 'parent_dir'/red-piranha
  * 'parent_dir'/rule-player

This is because the rule-player build depends on some items from the 'core' red-piranha project (e.g. Drools Libraries, the Core Red Piranha code) and puts the result (e.g. the Jar with JNLP files) back into the Red-Piranha project. Once deployed to the App Engine, Power Users can download and run the completed Rule Player as part of the deployed project. 

Source folders for both projects are:
  * red-piranha - checkout from http://code.google.com/p/red-piranha/source/browse/#svn%2Ftrunk
  * rule-player - checkout from http://code.google.com/p/red-piranha/source/browse/#svn%2Fred-player

Take care, as the structure in subversion differs slightly from the way the should be on your local disk after check out (see previous paragraph).

== Building the code ==

_TODO Complete these instructions_

[http://ant.apache.org/ Ant build] files are provided so that the project can build from the terminal or command line, and the project files modified using your favourite editor.



_TODO_ blurb on the options Eclipse to test, Eclipse to build & deploy GAE, Ant build x2, Ant deploy GAE

=== How to run in Eclipse ===  


Personally, I use Eclipse to edit and build the code (hence the reason why Eclipse build files are 

  * For the moment right click on the Red Piranha project name, resolve the build errors, let Eclipse carry out an automated build.
  * _work in progress_ an ant build file
  * RulePlayer Console
  * Red Piranha Junit Tests (see [ProjectLayout])
  * Red Piaranha Main methods (See [ProjectLayout]
    
   
=== Developer RulePlayer build ===
_TODO_  
  * Document both build file targets
  * Document Main Targets that you'll actually use (and what they do)
  * build.xml within the ruleplayer
  ** RulePlayer ant build will build jar, copy into red-piranha/war

  
  * repackaging of dependicings
  * security and signing jars using the jar-signer script 
 
 ** test in eclipse - right click and 'run as applet'
  
  
=== Developer signing RulePlayer jars ===

  * Explain Why - Webstart security (what is 
  * Jarsigner - file in rp/scripts
  * More info at http://java.sun.com/developer/Books/javaprogramming/JAR/sign/signing.html
  * Command similar to {{{jarsigner -keystore ~/.keystore *.jar mykey}}} but make sure that you are in
  red-piranha/war/ruleplayer/lib folder when you execute this.


=== Developer Core Red Piranha build ===

_TODO - spec this_

== Deploying to App Engine ==

  * use the Google App Engine Toolbar in Eclipse
<img src="./images/google_app_engine_eclipse_button.png"/>
  * _work in progress_ an ant build file
  * _work in progress_ automated tools

== Building your own rules ==

_TODO - complete this section_

This is for building your rules in the Eclipse Development environment. [PowerUserGettingStarted] details how most users will build their rules and then share them via the web

  * _work in progress_  For the moment, you need to 
  # Write your rule (similar to [http://code.google.com/p/red-piranha/source/browse/trunk/war/sampleresources/ExcelDataRules/log-then-modify-rules.drl log-then-modify-rule.drl]
  # Add you new rule using [http://code.google.com/p/red-piranha/source/browse/trunk/src/net/firstpartners/drools/PreCompileRuleList.properties PreCompileRuleList.properties]
  # Create the pre-built KnowledgePackage using [PreCompileRuleBuilder.java http://code.google.com/p/red-piranha/source/browse/trunk/src/net/firstpartners/drools/PreCompileRuleBuilder.java] . TestPreCompileRuleBuilder is one easy way of running this through eclipse
  # Modify the [http://code.google.com/p/red-piranha/source/browse/trunk/war/service.jsp Service.jsp] to include the option of selecting your newly created knowledgebase.
  # Deploy to Google App Engine and enjoy!

== Extending Red Piranha ==

_work in progress_ for the moment you'll have to explore the code!

*[http://code.google.com/p/red-piranha/source/browse/trunk/src/net/firstpartners/drools/PreCompileRuleBuilder.java Link to Builder]* The code that builds the pre-compiled rule packages. Start with the main[] method.

*[http://code.google.com/p/red-piranha/source/browse/trunk/src/net/firstpartners/ui/Rp2Servlet.java Link to Servlet]* The code that calls the pre-compiled rule packages. Start with the service() method that runs in response to the form submitted by the jsp submission.



== Red Piranha for Drools Developers ==

If you've used [http://www.jboss.org/drools] JBoss Drools, you'll be pretty familiar with most of the concepts. This sections explain what Red-Piranha does (and does not) do compared to JBoss Drools.

Most business users are more comfortable with Excel and the Web than with Java. Red-Piranha packages Java based Drools so that they can start writing and using business rules straight away. Red-Piranha allows them to put your rules and data in Excel, then call Drools in a simple package to do the hard work.


  * Red Piranha uses [http://www.jboss.org/drools] as a key library. It's focus is more on Excel and Google Docs users looking to add the power of a rule engine to their documents.
  * Google App Engine (GAE) is a key deployment target, and enforces key limitations on the code; For examples rules cannot be 'compiled' in the normal Drools way, hence the offline package step, before you deploy.
  * With Drools, you normally supply (1) The rules file (2) A Model (or data structure) holding the information that the rules act on (3) Java code to tie it all together. 
  * With Red-Piranha all you need is 1) the rules file. The Data structure is always excel, and there is standard Java code to combine the Rules and the excel spreadsheet. This makes it easier, although Drools gives you more flexibility (with a bit more work!).








<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>